"""relocate movie_status and comments tables into different schemas and delete foreign keys

Revision ID: 48a36ae7eab0
Revises: fgdj1i2n4b8g
Create Date: 2025-02-20 23:30:44.871824

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '48a36ae7eab0'
down_revision = 'fgdj1i2n4b8g'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('CREATE SCHEMA IF NOT EXISTS comments_schema')

    op.create_table('comments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('text', sa.String(length=256), nullable=False),
    sa.Column('author_nickname', sa.String(length=64), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('movie_id', sa.String(length=64), nullable=False),
    sa.Column('likes', sa.Integer(), nullable=True),
    sa.Column('dislikes', sa.Integer(), nullable=True),
    sa.Column('publication_time', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='comments_schema'
    )

    op.execute('CREATE SCHEMA IF NOT EXISTS movie_status_schema')

    op.create_table('movie_status',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('movie_id', sa.String(length=64), nullable=False),
    sa.Column('movie_title', sa.String(length=256), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('watched_date', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='movie_status_schema'
    )
    op.drop_table('comments')
    op.drop_table('movie_status')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('movie_status',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('movie_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('watched_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('movie_title', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users_schema.users.user_id'], name='movie_status_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='movie_status_pkey')
    )
    op.create_table('comments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('text', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    sa.Column('author_nickname', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('movie_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('likes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('dislikes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('publication_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['author_nickname'], ['users_schema.users.nickname'], name='comments_author_nickname_fkey'),
    sa.PrimaryKeyConstraint('id', name='comments_pkey')
    )
    op.drop_table('movie_status', schema='movie_status_schema')
    op.drop_table('comments', schema='comments_schema')

    op.execute('DROP SCHEMA IF EXISTS comments_schema')
    op.execute('DROP SCHEMA IF EXISTS movie_status_schema')
    # ### end Alembic commands ###
